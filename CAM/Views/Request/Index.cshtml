@using CAM.Core.Domain
@model RequestViewModel

@{
    ViewBag.Title = "Index";
}

@using (Html.BeginForm("Index", "Request", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    
    <legend>Employee Information</legend>

    <div class="control-group">

        <fieldset>
            <div class="control-group">
                <label class="control-label" for="name" >Name</label>
                <div class="controls">
                    @Html.TextBoxFor(model => model.Request.FirstName, new { @placeholder = "First Name" })
                    @Html.TextBoxFor(model => model.Request.LastName, new { @placeholder = "Last Name" })
                    @Html.ValidationMessageFor(model => model.Request.FirstName)
                    @Html.ValidationMessageFor(model => model.Request.LastName)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.Request.Email, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Request.Email, new { @placeholder = "Email" })
                    @Html.ValidationMessageFor(model => model.Request.Email)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.Request.PositionTitle, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Request.PositionTitle, new { @placeholder = "Position Title" })
                    @Html.ValidationMessageFor(model => model.Request.PositionTitle)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.Request.Department, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Request.Department, new { @placeholder = "Department" })
                    @Html.TextBoxFor(model => model.Request.Unit, new { @placeholder = "Unit" })
                    @Html.ValidationMessageFor(model => model.Request.Department)
                    @Html.ValidationMessageFor(model => model.Request.Unit)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.Request.OfficeLocation, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Request.OfficeLocation, new { @placeholder = "Location / Building" })
                    @Html.TextBoxFor(model => model.Request.Room, new { @placeholder = "Room #", @class = "input-mini" })
                    @Html.ValidationMessageFor(model => model.Request.OfficeLocation)
                    @Html.ValidationMessageFor(model => model.Request.Room)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(model => model.Request.ContactPhone, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(model => model.Request.ContactPhone, new { @placeholder = "(###) XXX-XXXX " })
                    @Html.ValidationMessageFor(model => model.Request.ContactPhone)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="name" >Employment Dates</label>
                <div class="controls">
                    @Html.TextBox("Start", Model.Request.Start.ToString("d"), new { @class = "datepicker input-small" })
                    @Html.ValidationMessageFor(model => model.Request.Start)
                    <span style="margin: 0 5px;">through</span>
                    @Html.TextBox("End", Model.Request.End.HasValue ? Model.Request.End.Value.ToString("d") : string.Empty, new { @class = "datepicker input-small" })
                    @Html.ValidationMessageFor(model => model.Request.End)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">Hire Type:</label>
                <div class="controls">
                    <label class="radio">
                        @Html.RadioButton("HireType", HireType.NewPosition, Model.Request.HireType == HireType.NewPosition)
                        New Position
                    </label>
                    <label class="radio">
                        @Html.RadioButton("HireType", HireType.Rehire, Model.Request.HireType == HireType.Rehire)
                        Rehire
                    </label>
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">Employee Type:</label>
                <div class="controls">
                    <label class="radio">
                        @Html.RadioButton("EmployeeType", EmployeeType.Career, Model.Request.EmployeeType == EmployeeType.Career)
                        Career Staff
                    </label>
                    <label class="radio">
                        @Html.RadioButton("EmployeeType", EmployeeType.Temp, Model.Request.EmployeeType == EmployeeType.Temp)
                        Temp
                    </label>
                    <label class="radio">
                        @Html.RadioButton("EmployeeType", EmployeeType.Volunteer, Model.Request.EmployeeType == EmployeeType.Volunteer)
                        Volunteer
                    </label>
                    <label class="radio">
                        @Html.RadioButton("EmployeeType", EmployeeType.Student, Model.Request.EmployeeType == EmployeeType.Student)
                        Student
                    </label>
                    <label class="radio">
                        @Html.RadioButton("EmployeeType", EmployeeType.Other, Model.Request.EmployeeType == EmployeeType.Other)
                        Other
                    </label>
                </div>
            </div>
        </fieldset>

    </div>

    <legend>Email</legend>

    <div class="control-group">

        <fieldset>

            <div class="control-group">
                @Html.LabelFor(model => model.Request.NeedsEmail, new { @class = "control-label" })
                <div class="controls">
                    <label class="checkbox">
                        @Html.CheckBoxFor(model => model.Request.NeedsEmail)
                        Yes, user needs a new email account
                    </label>

                    <p class="help-block">
                        <em>* Users who will need to access Outlook calendars will need a CAES email account.</em>
                    </p>

                </div>
            </div>

            <div class="control-group">
                <label class="control-label" for="distributionLists">Distribution List(s):</label>
                <div class="controls">
                    <ul id="distLists" class="unstyled">
                        @foreach (var dl in Model.Request.DistributionLists)
                        {
                            <li>@Html.TextBox("DistributionLists", dl.Name)
                                <a href="#" class="btn btn-danger removeDistList">
                                    <i class="icon-minus"></i> Remove
                                </a>
                            </li>
                        }
                        <li>@Html.TextBox("DistributionLists")
                            <a href="#" class="btn btn-danger removeDistList">
                                <i class="icon-minus"></i> Remove
                            </a>
                        </li>    
                    </ul>

                    <a href="#" id="addDistLists" class="btn btn-success">
                        <i class="icon-plus"></i> Add
                    </a>
                </div>
            </div>

        </fieldset>

    </div>

    <legend>Software</legend>

    <div class="control-group">

        <fieldset>

            <div class="control-group">
                <p class="help-block">
                    The following software (http://computing.caes.ucdavis.edu/computing-policies/supported-software) will be installed by default on all CA&ES managed computers.  Please check the boxes under Optional Software if you would like the software installed on the new user’s computer.  If the user requires software that is not listed below, please contact the Computer Resources Unit (CRU) helpdesk at csrequests@caes.ucdavis.edu.
                </p>
            </div>

            <div class="control-group">
                <label class="control-label" for="software">Optional Software</label>
                


                <div class="controls">
                    <ul id="software" class="unstyled">
                        
                        @foreach (var software in Model.GetSoftwareList())
                        {
                            <li>                              
                                <label class="checkbox">
                                    @*@Html.CheckBox(software.Value, software.Selected)*@
                                    <input type="checkbox" value="@software.Value" name="software" @(software.Selected ? "checked='checked'" : string.Empty) />
                                    @software.Text
                                </label>
                            </li>

                        }

                    </ul>
                </div>
            </div>

        </fieldset>

    </div>

    <legend>Hardware</legend>

    <div class="control-group">

        <!-- New Position -->
        <fieldset id="NewPosition" style='@(Model.Request.HireType != HireType.NewPosition ? @"display: none;" : string.Empty)'>
            <div class="control-group">
                <p class="help-block">The computer resources unit will either redeploy an existing computer or purchase a new computer.</p>
            </div>

            
            <div class="control-group">
                <label for="ComputerType" class="control-label">New Computer</label>
                <div class="controls">
                    <ul class="unstyled">
                        <li>
                            <label class="radio">
                                <input type="radio" name="ComputerType" value="Desktop" @(Model.Request.HardwareType == HardwareType.Desktop ? "checked='checked'" : string.Empty) />
                                Desktop
                            </label>
                        </li>
                        <li>
                            <label class="radio">
                                <input type="radio" name="ComputerType" value="Laptop" @(Model.Request.HardwareType == HardwareType.Laptop ? "checked='checked'" : string.Empty) />
                                Laptop
                            </label>
                        </li>
                    </ul>
                </div>
            </div>

        </fieldset>

        <!-- Rehire -->
        <fieldset id="Rehire" style='@(Model.Request.HireType == HireType.Rehire ? string.Empty : "display: none;")' >
            <div class="control-group">
                <p class="help-block">They will use the same computer used by the person they are replacing unless the computer is out of warranty</p>
            </div>
        </fieldset>

        <!-- No type selected -->
        <fieldset id="notype" style='@(Model.Request.HireType == null ? string.Empty : "display: none;")'>
            <div class="control-group">
                <p class="help-block">You need to select whether the employee will be a new hire or a rehire.</p>
            </div>
        </fieldset>

    </div>

    <legend>Network Drive Permissions</legend>

    <div class="control-group">

        <fieldset>
            
            <div class="control-group">
            <p class="help-block">Employees have access to communal network resources often referred to as “network drives”.  Permission to access the network drives is usually dependent on unit and/or departmental affiliation.  We will verify with the unit/department head and the employee’s supervisor before granting access to any network drives.  The employee will automatically have full access to their personal home directory.</p>
            </div>                

            <div class="control-group">
                <label for="networkPermissions" class="control-label">Network Shares</label>
                <div class="controls">
                    
                    <ul class="unstyled">
                    
                        @{
                        var nsl = Model.GetNetworkShareList();
                        }
                        
                        @foreach (var g in nsl.Select(a => a.GroupId).Distinct())
                        {
                            if  (!string.IsNullOrEmpty(g))
                            {
                                <li>
                                <strong>@g</strong>
                                </li>
                            }
                            foreach (var ns in nsl.Where(a => a.GroupId == g))
                            {
                                <li>
                                    <label class="checkbox">
                                        <input type="checkbox" value="@ns.Value" name="networkshares" @(ns.Selected || ns.ForceSelect ? "checked='checked'" : string.Empty) @(ns.ForceSelect ? "disabled='disabled'" : string.Empty) />
                                        @ns.Text
                                    </label>
                                </li>

                            }   
                            
                        }
                        
                        
                    </ul>
                </div>
            </div>
            
            <div class="control-group">
                @Html.LabelFor(model => model.Request.AdditionalFolders, new {@class="control-label"})
                <div class="controls">
                    @Html.TextBoxFor(model => model.Request.AdditionalFolders)
                    @Html.ValidationMessageFor(model => model.Request.AdditionalFolders)
                </div>
            </div>

        </fieldset>

    </div>

    <div class="form-actions">
        <input type="submit" value="Submit" class="btn btn-primary" />
        <a href="#" class="btn">Cancel</a>
    </div>
}

@section AdditionalScripts{
    
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.tmpl.min.js")"></script>

    <script type="text/javascript">
    $(function () {

        $("#addDistLists").click(function (e) {
            var test = $("#DistListTemplate").tmpl().appendTo("#distLists");
            $(test).show("normal");

            e.preventDefault();
        });

        $("#distLists").on('click', 'a', function (e) {
            $(this).closest("li").hide('normal', function () { $(this).remove(); });
            e.preventDefault();
        });

        $("input[name='Type']").change(function (e) {
            
            $("#notype").hide();

            if ($(this).val() == "NewPosition") {
                $("#NewPosition").show();
                $("#Rehire").hide();
            }
            else {
                $("#NewPosition").hide();
                $("#Rehire").show();
            }

        });

    });
    </script>

    <style type="text/css">
    #distLists li
    {
        margin:  .5em 0;
    }
    </style>

    <script id="DistListTemplate" type="text/x-jquery-tmpl">
        <li style="display:  none;"><input type="text" Name="DistributionLists" value="${Value}" />
            <a href="#" class="btn btn-danger removeDistList">
                <i class="icon-minus"></i> Remove
            </a>
        </li>
    </script>

}

